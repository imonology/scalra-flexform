<% layout('template/common') %>
<% block('title').append('<title>' + (typeof title === 'string' ? title : '表格填寫') + '</title>') %>
<script src="/web/moment.min.js"></script>
<script src="/web/flexform/flexform.js"></script>

<link rel="stylesheet" href="http://code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<script src="http://code.jquery.com/jquery-1.10.2.js"></script>
<script src="http://code.jquery.com/ui/1.11.4/jquery-ui.js"></script>	

<script>

// get data first
// ref: http://stackoverflow.com/questions/11151632/passing-an-object-to-client-in-node-express-ejs
	
/*
	format:
		{forms: [
			{name: '法師對外申請表', values: {'xxxx': {name: 'ABC', age: 35}}}, 
			{name: '活動內容', multi: true}
		]}	
*/
<%  
	var f = encodeURIComponent(JSON.stringify(forms));
	LOG.warn("f = ");
	LOG.warn(f);	
	// f.Replace("\"", "&quot;").Replace("'", "\\'");
%>

//var forms = JSON.parse('<%-JSON.stringify(forms).replace(/\'/g, "\\\'") %>');
var str = decodeURIComponent("<%-f %>");
console.log(str);
var forms = JSON.parse(str);


// form_id -> form fields mapping
var form_data = {};

// info related to existing data
var record_id = undefined;

// allows the creation of date pickers
var date_pickers = [];

/*
// original date picker setting
var datepicker_setting = {
	//可使用下拉式選單 - 月份
	changeMonth : true,
	//可使用下拉式選單 - 年份
	changeYear : true,
	//設定 下拉式選單月份 在 年份的後面
	showMonthAfterYear : true,
	dateFormat: 'yy-mm-dd'

};
*/

// Chinese settings
var datepicker_setting = {
	defaultDate : (new Date(new Date().getFullYear() - 30
						+ "/01/01") - new Date())
						/ (1000 * 60 * 60 * 24),
	yearRange : "-100:+0",
	maxDate : '+0',
	dayNamesMin : ['日', '一', '二', '三', '四', '五', '六'],
	monthNamesShort	: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
	//可使用下拉式選單 - 月份
	changeMonth : true,
	//可使用下拉式選單 - 年份
	changeYear : true,
	//設定 下拉式選單月份 在 年份的後面
	showMonthAfterYear : true,
	dateFormat: 'yy-mm-dd'
}

var onPhotoUploaded = function (err) {
	if (!err) {
		 //document.getElementById("uploaded_photo").innerHTML = 'Hello World!';
		 //document.getElementById("uploaded_photo").innerHTML = '<img id="show_image" width="300" src="/web/images/<%=login.account%>.jpg" style="display: none;" onload=\'this.style="block"\'>';
		// $("#uploaded_photo").html('<img id="show_image" width="300" src="/web/images/<%=login.account%>.jpg" style="display: block">');
		$("#show_image").attr({'src': "/web/images/<%=login.account%>.jpg?" + new Date().getTime()});
		console.log('reload done');
	}
}

var has_img = function(me, id){
	me.style="block";
	document.getElementById(id).value = "has_img";
}
var no_img = function(id){
	document.getElementById(id).value = "";
}

// generate a single form table from form_id
var generate_table = function (form_id, entry_id, no_delete, record_id) {
	if (!form_data[form_id]) {
		console.error('cannot find fields info for [' + form_id + ']');
		return undefined;
	}
	
	// field name/info
	var fields = form_data[form_id].fields;
	var hide = form_data[form_id].hide;
	
	// existing values, if any
	console.log('checking exsting form values for record: [' + record_id + ']');
	
	var values = {};
	if (record_id !== 'new_data') {
		if (typeof form_data[form_id].values === 'object' && form_data[form_id].values[record_id]) {
			values = form_data[form_id].values[record_id];
		}
		console.log(values);
	}
	// start to build html table
	var html = '<table class="customTable" id="form-' + entry_id + '" border="1">';
	
	// store existing record_id, if any
	// NOTE: _record_id is used to identify & update existing records
	if (Object.keys(values).length > 0) {
		console.log('storing hidden field _record_id: ' + record_id);
		html += '<input type="hidden" id="_record_id" value="' + record_id + '">';
	}

	for (var i=0; i < fields.length; i++) {

		// we skip field if it's not designed to be visible, or is part of the 'hide' field array
		if (!fields[i].show || hide.indexOf(fields[i].id) !== (-1)) {
			continue;
		}
		
		html += ('<tr><td width="30%">' + fields[i].name + (fields[i].must ? '*' : '') + '</td>');
		html += '<td width="70%">';
		
		//console.log('fields[i].id: ');
		console.log(fields[i].id + '[' + fields[i].type + ']: ' + values[fields[i].id]);
		//console.log(values[fields[i].id]);
		
		var values_data = (values[fields[i].id] ? values[fields[i].id] : '');
		
		if (fields[i].type === 'multichoice') { 
			var options = fields[i].option.split(',');
			var checked_values = (values[fields[i].id] ? values[fields[i].id].split(',') : []);
			
			for (var j=0; j < options.length; j++) {
				var id = entry_id + '-' + fields[i].id + j;
				var name = entry_id + '-' + fields[i].id;
				var checked = (checked_values.indexOf(options[j]) !== (-1));
				
				console.log('[' + options[j] + ']' + ' vs. ' + '[' + checked_values + '] = ' + checked);
				html += '<input type="checkbox" name="' + name + '" id="' + id + '" value="' + options[j] + '" ' + (checked === true ? 'checked' : '') + '>';	
				html += '<label for="' + id + '">' + options[j] + '</label>';
			}
		} else if (fields[i].type === 'choice') {
			var options = fields[i].option.split(',');
			
			// radio-button version (currently not working)			
			//for (var j=0; j < options.length; j++) {
			// var checked = (options[j] === values[fields[i].id]);			
			// console.log(options[j] + ' vs. ' + values[fields[i].id] + ' = ' + checked);	
			//	html += '<input type="radio" name="' + entry_id + '-' + fields[i].id + '" value="' + options[j] + '" checked="' + (checked ? 'true' : '') + '">' + options[j] + ' &nbsp';
			//}
			
			// pull-down version
			html += '<select id="' + entry_id + '-' + fields[i].id + '">';
			for (var j=0; j < options.length; j++) {
				var checked = (options[j] === values_data);			
				console.log(options[j] + ' vs. ' + values_data + ' = ' + checked);		
				html += '<option value="' + options[j] + '" ' + (checked === true ? 'selected' : '') + '>' + options[j] + '</option>';
			}
			html += '</select>';
		} else if (fields[i].type === 'date') {
			html += '<input type="text" value="' + values_data + '" id="' + entry_id + '-' + fields[i].id + '">';
			date_pickers.push(entry_id + '-' + fields[i].id);
			
		} else if (fields[i].type === 'upload') {
			html += '<form enctype="multipart/form-data" method="post" action=\'javascript:;\' role="form" id="frmUploadFile">'
			html += '<input type="hidden" name="toPreserveFileName" value="true" checked>';
			html += '<input type="file" name="upload" multiple="multiple" id="upload_file">';
			html += '<button class="btn btn-primary" onClick="uploadFile(\'<%=login.account%>\', onPhotoUploaded)">Upload</button>';
			html += '<input type="hidden" value="" id="' + entry_id + '-' + fields[i].id + '">'
			// if photo exists then display, otherwise make it hidden first			
			//var display = (values[fields[i].id] ? 'block' : 'none');
			html += '<div id="uploaded_photo"><img id="show_image" width="250" src="/web/images/<%=login.account%>.jpg" style="display: none;" onload="has_img(this, \''+entry_id + '-' + fields[i].id +'\')" onerror="no_img(\''+entry_id + '-' + fields[i].id +'\')" ></div>'

		} else {
			// for strings			
			var value = values_data.replace(/\"/g, "&quot;");
			//var value = values_data;
			//var value = encodeURIComponent(values_data);
			//var value = values_data;
			console.log(value);
			html += '<input type="text" id="' + entry_id + '-' + fields[i].id + '" value="' + value + '" title="'+fields[i].desc+'" >';
		}
		
		html += '</td>';
		// html += '<td width="300">' + fields[i].desc + '</td>';
		html += '</tr>';
	}
	
	// check whether to add 'add' 'remove' button
	if (form_data[form_id].multi) {
		html += '<tr><td colspan="3"><a href="javascript:add_form(\'' + form_id + '\')">新增</a>';
		
		// add delete button by default
		if (no_delete !== true) {
			html += '&nbsp<a href="javascript:delete_form(this, \'' + form_id + '\', \'' + entry_id + '\');">刪除</a></td></tr>';			
		}
	}
	
	html += '</table>';
	return html;
}

// remove a given form based on its form_id and entry_id
var delete_form = function (t, form_id, entry_id) {
	
	if (form_data.hasOwnProperty(form_id) === false) {
		alert('no form can be found for form_id:' + form_id);
		return;
	}
	
	// remove the entry from the form's form_field data
	var entries = form_data[form_id].entries;
	
	for (var i=0; i < entries.length; i++) {
		console.log('entries[' + i + ']: ' + entries[i]);
		
		if (entries[i] === entry_id) {
			// remove entry with the remote id
			console.log('removing entry: ' + entry_id);
			entries.splice(i, 1);
			
			// remove the entry from display
			//deleteRow(t);
			deleteRow(entry_id);
			return;
		}
	}
	
	// something is wrong if nothing's found	
	if (i === entries.length) {
		alert('cannot find form to delete! form_id: ' + form_id + ' entry_id: ' + entry_id);
		return;
	}
	
}

// remove row by id
// ref: http://stackoverflow.com/questions/4967223/delete-a-row-from-a-table-by-id
function deleteRow(rowid)  
{   
    var row = document.getElementById(rowid);
    var table = row.parentNode;
    while (table && table.tagName != 'TABLE')
        table = table.parentNode;
    if (!table)
        return;
    table.deleteRow(row.rowIndex);
}


/*
// remove a given row from table
// ref: 
// http://stackoverflow.com/questions/20147605/delete-row-from-table-dynamically-created-in-javascript
function deleteRow(t)
{
    var row = t.parentNode.parentNode;
    document.getElementById("form_table").deleteRow(row.rowIndex);
    console.log(row);
}
*/

// add a form given form_id
var add_form = function (form_id, no_delete, record_id) {
	
	// produce an entry_id string
	var entry_id = Math.floor((Math.random() * 10000) + 1) + '';
	
	// record entry_id
	form_data[form_id].entries.push(entry_id);
	//console.dir(form_data[form_id].entries);
	
	// first generate table html
	var html = generate_table(form_id, entry_id, no_delete, record_id);
	if (!html) {
		return;
	}
	
	// add after last row
	// TODO: should add at a given insertion point
    var num = document.getElementById("form_table").rows.length;
    var tr = document.getElementById("form_table").insertRow(num);
	
	// set row's ID (important for deleting it)
	tr.id = entry_id;
    td = tr.insertCell(tr.cells.length);
    td.innerHTML = html;
	
	// NOTE: setup of datepickers must wait until HTML elements are loaded & exist
	for (var i=0; i < date_pickers.length; i++) {
		// add date-picker
		$(function() {
			$("#" + date_pickers[i]).datepicker(datepicker_setting);
		});
	}
}

// build whole page from form data
var generate_page = function () {
	
	// we generate tables for each form first
	for (var form_id in form_data) {
		// if there are existing records, we'll need to display them
		console.log('calling add_form for form_id: [' + form_id + ']');
		if (typeof form_data[form_id].values === 'object') {
			console.log('adding form with existing records...');
			var records = form_data[form_id].values;
			var count = 0;
			for (var record_id in records) {
				console.log('adding form with record_id [' + record_id + ']...');
				add_form(form_id, (count === 0 ? true : false), record_id);
				count++;
			}
			if ( count === 0 ) { // 假如是新的一筆，之前沒有資料
				console.log('adding form with record_id [ new data ]...');
				add_form(form_id, (count === 0 ? true : false), 'new_data');
				count++;
			}
		} else {	
			// if there's empty form to add
			console.log('adding an empty form...');
			add_form(form_id, true);
		}
	}
}

// attempt to load form fields and generate form page after connecting to server
var onConnect = function () {
	console.log('onConnect forms:');
	console.log(forms);
	
	// 告知有新表單用
	//SR.subscribe('main', 0, onMessage);
	//SR.subscribe('lobby', 50, onMessage);

	// fill in title (assume using first form)
	document.getElementById("form_title").innerText = forms[0].name;
	
	// whether this form allows multiple records
	// NOTE: multi flag is accessed by form_name
	var info = {};
	
	for (var i=0; i < forms.length; i++) {
		info[forms[i].name] = {multi: (forms[i].multi === true), index: i};
		
		SR.API.GET_FORM_FIELDS({name: forms[i].name}, function (err, data) {
			if (err) {
				return console.error(err);	
			}
			
			// NOTE: we also build mapping from form_id to exising values (if any)
			form_data[data.id] = {
				name: data.name, 
				fields: data.fields, 
				hide: forms[info[data.name].index].hide || [],
				multi: info[data.name].multi, 
				entries: [],
				values: forms[info[data.name].index].values};
			
			// also store form_id to 'forms' (for submit purpose)
			forms[info[data.name].index].id = data.id;
			
		 	//console.log('form_data:');
			//console.log(form_data);
									
			// check for done
			if (Object.keys(form_data).length === forms.length) {
				
				// cache form_id to 'forms' structure as well
				generate_page();
			}
		});
	}
};

// submit all forms
function submit() {

	// check if all values are correct first
	// TODO: find a better approach?
	for (var form_id in form_data) {
		var entries = form_data[form_id].entries;
		
		for (var i=0; i < entries.length; i++) {
			var entry_id = entries[i];

			if (!get_values(form_id, entry_id)) {
				return;
			}
		}
	}
	
	// store first form, then store rest once the record_id is obtained
	var form_id = forms[0].id;
	
	var onSuccess = function () {
		// 告知有新的表單
		//SR.publish('main', { msg: 'new'});
		
		alert('填寫成功!');
		document.location = '/main';		
	}
	
	submit_form(form_id, function (err, info) {
		if (err) {
			alert(err);
			return;
		}
		
		// if just single form, we're done!
		if (forms.length <= 1) {
			return onSuccess();
		}
		
		// otherwise we'll record the record_id with all other form entries
		var record_id = info.record_ids[0];
		
		for (var i=1; i < forms.length; i++) {
			form_id = forms[i].id;				
			submit_form(form_id, function (err, i) {
				if (err) {
					alert(err);
					return;
				}
				
				if (i === forms.length) {
					return onSuccess();	
				}
			}, record_id);
		}
	});
}

// submit a single form data
// NOTE: record_id is optional to indicate if this form is associatd with another form's record
function submit_form(form_id, onDone, parent_record_id) {

	if (!form_data[form_id]) {
		return onDone('cannot find form fields for [' + form_id + ']');
	}

	// mapping from field id to name
	var fields = form_data[form_id].fields;
	var field_name = {};
	var field_type = {};
	for (var i=0; i < fields.length; i++) {
		field_name[fields[i].id] = fields[i].name;
		field_type[fields[i].id] = fields[i].type;
	}

	var value_array = [];

	var confirm_data = '確定送出：\n';
	
	// get an array of values for a given form
	var entries = form_data[form_id].entries;
	for (var i=0; i < entries.length; i++) {
		var entry_id = entries[i];
		
		// get values for a given entry, invalid entries are ignored
		var values = get_values(form_id, entry_id);
		if (!values) {
			return;
		}
		
		// store confirm 
		for (var key in values) {
			// skip protected files (TOOD: should remove this)
			if (field_type[key] === 'upload' || field_type[key] === 'account')
				continue;
			
			if (field_name[key])
				confirm_data += field_name[key] + ':' + values[key] + '\n'; 			
		}
		
		confirm_data += '\n';
		value_array.push(values);
	}

	
	// confirm data correctness
	var r = confirm(confirm_data);
	if (r == false) {
		return;
	} 

	console.log('form data to send to sever:');
	console.log(value_array);
	
	// submit to server
	// NOTE: all entries for a given form are submitted at once
	SR.API.UPDATE_FORM({
		form_id:		form_id,
		value_array:	value_array,
		record_id:		parent_record_id
	}, function (err, result) {
		if (err) {
			console.error(err);
			return onDone(err);
		}
		
		// result format: {form_id: 'string', record_id: 'string'}
		// submit success
		onDone(null, result);
	});
}

// get values for a given entry 
function get_values(form_id, entry_id) {
	
	if (!form_data[form_id]) {
		console.error('cannot find form fields for [' + form_id + ']');
		return undefined;
	}
		
	var fields = form_data[form_id].fields;
	var hide = form_data[form_id].hide;

	var without_must = [];
	var warning = [];
	var values = {};
	
	for (var i=0; i < fields.length; i++) {
		if (fields[i].show === false || hide.indexOf(fields[i].id) !== (-1))
			continue;
		
		var field_id = fields[i].id;
		var field_type = fields[i].type;
		var element_id = entry_id + '-' + field_id;
		console.log('ele_id: ' + element_id);
						
		// if element doesn't exist, something's wrong, should stop
		// possibly this entry was deleted, but also possible a certain field is not shown due to group/role membership
		// NOTE: for multi-choice we assume the id 'element_id-0' exists, better way to check?
		if (!document.getElementById(element_id) && !document.getElementById(element_id + '0')) {
			console.warn('form [' + form_id + '] cannot find element: ' + element_id);
			continue;
		}

		// separate dealing with checkboxes
		// get checkbox values ref:
		// http://stackoverflow.com/questions/11599666/get-the-value-of-checked-checkbox
		if (field_type === 'multichoice') {
			
			var checked_array = $('input[name="' + element_id + '"]:checked');
			console.log('checked_array: ');
			console.dir(checked_array);
			console.log('length: ' + checked_array.length + ' type: ' + typeof checked_array);
			
			
			//var checked_array = $('input[name="' + element_id + '"]:checked');
			
			console.log(checked_array.serialize());
			
			//continue;
			/*
			checked_array.each(function() {
				str += ($(this).val()) + ',';
				count++;
				if (count === checked_array.length)
			});			
			*/
			var str = '';
			for (var j=0; j < checked_array.length; j++) {
				str += checked_array[j].value + ',';	
			}
			console.log(str);
			values[field_id] = str.substring(0, str.length-1);
		} else if (field_type === 'date') {
			var time = moment(document.getElementById(element_id).value);
			console.log('timestamp: ' + time.toDate().getTime());
			if (time.isValid() === false) {
				warning.push('[' + fields[i].name + '] 格式為: 2017-01-01 09:00');
				continue;
			}
			values[field_id] = document.getElementById(element_id).value;
		}
		else if (field_type === 'choice') {	
			values[field_id] = document.getElementById(element_id).value;
		} else {	
			values[field_id] = document.getElementById(element_id).value;	
		}
		
		// check for must/required fields
		if (fields[i].must) {
			console.log('must field [' + field_id + ']: ' + values[field_id]);
			if (!values[field_id] || values[field_id] === '') {
				without_must.push(fields[i].name);
			}
		}
	}

	if (without_must.length > 0) {
		warning.unshift(without_must.join('\n') + "\n\n為必填欄位\n");
	}
	
	if (warning.length > 0) {
		alert(warning.join('\n'));
		return;
	}
	
	// if nothing is entered, return undefined
	if (Object.keys(values).length === 0) {
		alert('沒輸入任何資料!');
		return;
	}
	
	values["account"] = "<%=login.account%>";
	
	if (document.getElementById('_record_id')) {		
		values['_record_id'] = document.getElementById('_record_id').value;
		console.log('attaching hidden record_id: ' + values['_record_id']);
	}
	return values;
}

</script>
				
			<section id="four" class="wrapper style2 special">
				<div class="inner">
					<header class="major narrow">
						<h2><div id="form_title"></div></h2>
						<p>請詳細填寫以下各欄資料</p>
					</header>

					<table class="" id="form_table">   
						<!-- <tbody></tbody> -->
						<!-- <tr><td><a href="javascript:">新增紀錄</a></td></tr> -->
					</table>
					
					<p>
					<ul class="actions">						
						<li><a class="button special" href="javascript:submit()">送出</a></li>
						<li><a class="button special" href="/main">回主畫面</a></li>					
					</ul>
				</div>
			</section>
